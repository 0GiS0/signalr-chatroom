name: "Terraform"

env:
  LU_FILE: LUIS-app/Offensive-Intents.lu

on:
  push:
    branches:
      - main
    paths-ignore:
      - "LUIS-app/*.lu"
      - "LUIS-app/tests/*.json"
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs:
      webapp_name: ${{ steps.tf_output.outputs.webapp }}
      storage: ${{ steps.tf_output.outputs.storage }}
      luis_auth_endpoint: ${{ steps.tf_output.outputs.luisendpoint }}
      luis_key: ${{ steps.tf_output.outputs.luiskey }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false #We need this to get the output
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
      - name: Get outputs from Terraform
        id: tf_output
        run: |
          echo "::set-output name=webapp::$(terraform output -raw app_service_name)"
          echo "::set-output name=luisendpoint::$(terraform output -raw luis_authoring_endpoint)"
          echo "::set-output name=luiskey::$(terraform output -raw luis_authoring_key)"
          echo "::set-output name=storage::$(terraform output storage_connection)"
  luis:
    name: "LUIS model"
    needs: [terraform]
    runs-on: ubuntu-latest
    outputs:
      appid: ${{ steps.luis_app.outputs.appid }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install @microsoft/botframework-cli
        run: |
          npm i -g @microsoft/botframework-cli
      - id: luis_app
        name: Get the App Id if the LUIS app already exists
        run: |
          appId=$(bf luis:application:list --subscriptionKey ${{ needs.terraform.outputs.luis_key }} --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} | jq -c '.[] | select(.name | . and contains('\"${{ needs.terraform.outputs.webapp_name }}\"')) | .id')
          echo "::set-output name=appid::$appId"
      - name: if it doesn't exist, create a LUIS app, assign the prediction key, import the last version of the model, train and publish
        if: ${{ steps.luis_app.outputs.appid == '' }}
        run: |
          response=$(bf luis:application:create --name ${{ needs.terraform.outputs.webapp_name }} --subscriptionKey ${{ needs.terraform.outputs.luis_key }} --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --versionId=0.0 --culture es-es --json)
          appId=$(echo "$response" | jq '.id' | xargs)            
          bf luis:application:assignazureaccount --azureSubscriptionId $(az account show --query id -o tsv) --appId $appId --accountName ${{ needs.terraform.outputs.webapp_name }}-luis-prediction --subscriptionKey ${{ needs.terraform.outputs.luis_key }} --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --resourceGroup ${{ needs.terraform.outputs.webapp_name }} --armToken $(az account get-access-token --query accessToken -o tsv)
          bf luis:convert -i $LU_FILE -o ./model.json --name ${{ needs.terraform.outputs.webapp_name }}
          bf luis:version:import --appId $appId --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --subscriptionKey ${{ needs.terraform.outputs.luis_key }}  --in model.json --versionId 0.2
          bf luis:train:run --appId $appId --versionId 0.2 --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --subscriptionKey ${{ needs.terraform.outputs.luis_key }} --wait
          bf luis:application:publish --appId $appId --versionId 0.2 --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --subscriptionKey ${{ needs.terraform.outputs.luis_key }}
          az webapp config appsettings set -g ${{ needs.terraform.outputs.webapp_name }} -n ${{ needs.terraform.outputs.webapp_name }} --settings LUIS:AppId=$appId
  deployment:
    name: "Deploy code"
    needs: [terraform, luis]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"
      - run: |
          dotnet restore
          dotnet build ./Chatroom -c Release
          dotnet publish ./Chatroom -c Release -o './webapp'
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.terraform.outputs.webapp_name }}
          package: ./webapp
      - name: See the storage connection
        run: echo ${{ needs.terraform.outputs.storage }}
      - uses: chabad360/hugo-actions@master
      - name: Copy static web into the Azure Storage
        uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: 'Chat'
          container_name: '$web'
          connection_string: ${{ needs.terraform.outputs.storage }}
          sync: true
