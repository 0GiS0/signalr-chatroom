# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform"

env:
  LU_FILE: Chatroom/Offensive-Intents.lu

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # terraform:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     webapp_name: ${{ steps.tf_output.outputs.url }} # map step output to job output
  #   steps:
  #     - id: tf_output
  #       name: send url to other job
  #       run: echo "::set-output name=url::https://google.com"
  # job2:
  #   runs-on: ubuntu-latest
  #   needs: terraform
  #   steps:
  #     - run: echo ${{ needs.terraform.outputs.webapp_name }} # grab job output here
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    outputs:
      webapp_name: ${{ steps.tf_output.outputs.webapp }}
      luis_auth_endpoint: ${{ steps.tf_output.outputs.luisendpoint }}
      luis_key: ${{ steps.tf_output.outputs.luiskey }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false #We need this to get the output
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      #   run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan
        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
      - id: tf_output
        run: |
          echo "::set-output name=webapp::$(terraform output -raw app_service_name)"
          echo "::set-output name=luisendpoint::$(terraform output -raw luis_authoring_endpoint)"
          echo "::set-output name=luiskey::$(terraform output -raw luis_authoring_key)"
  luis:
    name: "LUIS model"
    needs: [terraform]
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}     
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install @microsoft/botframework-cli
        run: |
          npm i -g @microsoft/botframework-cli      
      - id: luis_app
        name: Create a LUIS app
        run: | 
          appId=$(bf luis:application:create --name ${{ needs.terraform.outputs.webapp_name }} --subscriptionKey ${{ needs.terraform.outputs.luis_key }} --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --versionId=0.1)
          echo "::set-output name=appid::$appId"
      - name: Assign LUIS Azure Prediction resource to application          
        run: |
          subscriptionId=$(az account show --query id -o tsv)
          bf luis:application:assignazureaccount --azureSubscriptionId $subscriptionId --appId ${{ steps.luis_app.outputs.appid }} --accountName ${{ needs.terraform.outputs.webapp_name }}-luis-prediction --subscriptionKey ${{ needs.terraform.outputs.luis_key }} --endpoint ${{ needs.terraform.outputs.luis_auth_endpoint }} --resourceGroup ${{ needs.terraform.outputs.webapp_name }} --armToken $(az account get-access-token --query accessToken -o tsv)

  deployment:
    name: "Deploy code"
    needs: [terraform, luis]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"
      - run: |
          dotnet restore
          dotnet build ./Chatroom -c Release
          dotnet publish ./Chatroom -c Release -o './webapp'
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.terraform.outputs.webapp_name }} #This should be an output from Terraform job
          package: ./webapp
